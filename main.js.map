{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.material.design.module.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/sonar.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n<mat-toolbar color=\\\"primary\\\" class=\\\"mat-display-2\\\">\\r\\n  <button mat-button class=\\\"button display-1\\\">Home</button>\\r\\n</mat-toolbar>\\r\\n<div>\\r\\n  <button mat-raised-button class=\\\"button display-1\\\" (click)=\\\"testRest()\\\">Test REST</button>\\r\\n</div>\"","module.exports = \"\"","import { Component } from '@angular/core';\r\nimport { SonarService } from './sonar.service';\r\nimport { SonarComponent } from './sonar-component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  sonarComponents: SonarComponent[];\r\n\r\n  constructor(private sonarService: SonarService) { }\r\n\r\n  public testRest() {\r\n    console.log('testing');\r\n    this.sonarService.getProjects().subscribe(\r\n      res => {\r\n        console.log(res);\r\n        this.sonarComponents = res;\r\n      },\r\n      err => console.error(err)\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { MatToolbarModule, MatButtonModule } from '@angular/material';\r\n\r\n@NgModule({\r\n  imports: [MatToolbarModule, MatButtonModule],\r\n  exports: [MatToolbarModule, MatButtonModule]\r\n})\r\nexport class MaterialDesignModule { }\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { MaterialDesignModule } from './app.material.design.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    MaterialDesignModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map, tap } from 'rxjs/operators';\n// import { Observable, of } from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { SonarComponent } from './sonar-component';\n\n@Injectable({ providedIn: 'root' })\nexport class SonarService {\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n\n  getProjects(): Observable<SonarComponent[]> {\n\n     const corsIo = 'https://cors.io/?';\n     const sonarCloud = 'https://sonarcloud.io/api/components/search?qualifiers=TRK';\n\n    /*return this.http.get(corsIo + sonarCloud)\n    .pipe(\n      map(result => result['paging'].total ),\n      tap(h => {\n        const outcome = h ? `fetched` : `did not find`;\n        console.log(`outcome: ${outcome}`);\n      })\n    );*/\n\n    return this.http.get(corsIo + sonarCloud)\n    .pipe(\n      map(result => result['components'] ),\n      tap(h => {\n        const outcome = h ? `fetched` : `did not find`;\n        console.log(`outcome: ${outcome}`);\n      })\n    );\n    /*const testt: SonarComponent[] = [\n      {\n        'organization': 'default',\n        'id': '074a7ccb-5b95-4d62-ab43-915aaff9fa2a',\n        'key': 'org.apache.tika:tika',\n        'name': 'Apache Tika',\n        'qualifier': 'TRK',\n        'project': 'org.apache.tika:tika'\n      },\n      {\n        'organization': 'default',\n        'id': '133e15c3-4829-40ff-81a7-f8599c232bcd',\n        'key': 'org.apache.gora:gora',\n        'name': 'Apache Gora',\n        'qualifier': 'TRK',\n        'project': 'org.apache.gora:gora'\n      }];\n    return of(testt);*/\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}